Parameters:
  EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:
  ProfileWithRolesForOurApp:  
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - role_for_ec2  #role i created before on aws to associate it to some machines here

  LBSecGroup: #security group to control the load balancer ports(in/out)
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      
  WebServerSecGroup:  #security group to control the web server ports(in/out), port 22 to use it in logs and Troubleshoots
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:   
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          apt-get install unzip awscli -y
          cd /var/www/html
          rm index.html
          aws s3 cp s3://udacity-project2-demo-1/udacity.zip . #copy the wep app from s3 bucket
          unzip -o udacity.zip
      ImageId: ami-005bdb005fb00e791    #need to be edited to new one
      SecurityGroups:
      - Ref: WebServerSecGroup  #associate the web app with security group
      InstanceType: t3.medium   #the machine type
      IamInstanceProfile:
        Ref: ProfileWithRolesForOurApp  #associate the role i created to this machine
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"          #create only 1 partition with 10 GB
        Ebs:
          VolumeSize: '10'

  WebAppGroup:          #associate Auto scalling group to our machine with MAX machines = MIN machines = 4 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig   #set configuration to the Auto scalling group to know how to detect the machine is failed
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:   #associate the load balancer to the public machines that created in network.yaml file
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:   #associate the load balancer to the target group
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:    #target group to be associated to the load balancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

Outputs: 
  LoadBalancerDNSName:
    Description: The DNSName of the load balancer
    Value: !Join ["",["http://",!GetAtt WebAppLB.DNSName]]
    Export:
        Name: !Sub ${EnvironmentName}-DNSName-LB
